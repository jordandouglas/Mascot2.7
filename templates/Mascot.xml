<beast version='2.0'
    namespace='beast.app.beauti
    :beast.core
    :beast.evolution.branchratemodel
    :beast.evolution.speciation
    :beast.evolution.tree.coalescent
    :beast.core.util
    :beast.evolution.nuc
    :beast.evolution.operators
    :beast.evolution.sitemodel
    :beast.evolution.substitutionmodel
    :beast.evolution.likelihood
    :beast.evolution
    :beast.math.distributions'
    templateinfo='template for approximate structured coalescent analyses'>
    
    <map name='connect' reserved='true'>beast.app.beauti.BeautiConnector</map>
    <map name='subtemplate' reserved='true'>beast.app.beauti.BeautiSubTemplate</map>
    <map name='Uniform'>beast.math.distributions.Uniform</map>
    <map name='Normal'>beast.math.distributions.Normal</map>
    <map name='OneOnX'>beast.math.distributions.OneOnX</map>
    <map name='LogNormal'>beast.math.distributions.LogNormalDistributionModel</map>
    <map name='Exponential'>beast.math.distributions.Exponential</map>
    <map name='Gamma'>beast.math.distributions.Gamma</map>
    <map name='Beta'>beast.math.distributions.Beta</map>
    <map name='LaplaceDistribution'>beast.math.distributions.LaplaceDistribution</map>
    <map name='InverseGamma'>beast.math.distributions.InverseGamma</map>
    <map name='prior'>beast.math.distributions.Prior</map>
    
    <beauticonfig spec='BeautiConfig'
        inputLabelMap='beast.core.MCMC.operator=Operators,
        beast.core.MCMC.logger=Loggers,
        beast.evolution.sitemodel.SiteModel.mutationRate =Substitution Rate'
        inlinePlugins = 'beast.core.MCMC.distribution,
        beast.evolution.sitemodel.SiteModel.substModel,
        beast.evolution.tree.coalescent.ExponentialGrowth,
        beast.evolution.tree.coalescent.ConstantPopulation,
        beast.evolution.tree.coalescent.Coalescent,
        beast.core.State.stateNode'
        collapsedPlugins = 'beast.core.MCMC.logger'
        suppressPlugins = 'beast.core.MCMC.operator,
        beast.core.MCMC.operatorschedule,
        beast.evolution.tree.coalescent.Coalescent.treeIntervals,
        beast.evolution.tree.coalescent.Coalescent.tree,
        beast.core.MCMC.state,
        beast.core.MCMC.distribution,
        beast.core.MCMC.init,
        beast.evolution.speciation.BirthDeathGernhard08Model.treeIntervals,
        beast.evolution.speciation.BirthDeathGernhard08Model.tree,
        beast.evolution.speciation.BirthDeathGernhard08Model.sampleProbability,
        beast.evolution.speciation.YuleModel.treeIntervals,
        beast.evolution.speciation.YuleModel.useTipDates,
        beast.evolution.speciation.YuleModel.tree,
        beast.evolution.tree.Tree,
        beast.evolution.tree.Tree.trait,
        beast.evolution.tree.Tree.taxa,
        beast.evolution.tree.Tree.taxonset,
        beast.evolution.tree.RandomTree.trait,
        beast.evolution.tree.RandomTree.initial,
        beast.evolution.tree.RandomTree.taxa,
        beast.evolution.tree.RandomTree.taxonset,
        beast.evolution.tree.RandomTree.estimate,
        beast.util.TreeParser.initial,
        beast.util.TreeParser.taxa,
        beast.util.TreeParser.taxonset,
        beast.util.TreeParser.trait,
        beast.util.TreeParser.estimate,
        beast.util.ClusterTree.initial,
        beast.util.ClusterTree.taxa,
        beast.util.ClusterTree.taxonset,
        beast.util.ClusterTree.trait,
        beast.util.ClusterTree.estimate,
        beast.evolution.substitutionmodel.WAG.rates,
        beast.evolution.substitutionmodel.WAG.frequencies,
        beast.evolution.substitutionmodel.JTT.rates,
        beast.evolution.substitutionmodel.JTT.frequencies,
        beast.evolution.substitutionmodel.Blosum62.rates,
        beast.evolution.substitutionmodel.Blosum62.frequencies,
        beast.evolution.substitutionmodel.Dayhoff.rates,
        beast.evolution.substitutionmodel.Dayhoff.frequencies,
        beast.evolution.substitutionmodel.CPREV.rates,
        beast.evolution.substitutionmodel.CPREV.frequencies,
        beast.evolution.substitutionmodel.MTREV.rates,
        beast.evolution.substitutionmodel.MTREV.frequencies,
        beast.evolution.substitutionmodel.GTR.rates,
        beast.evolution.substitutionmodel.JukesCantor.frequencies,
        beast.math.distributions.Prior.x,
        beast.math.distributions.MRCAPrior.tree,
        beast.math.distributions.MRCAPrior.monophyletic,
        beast.math.distributions.MRCAPrior.taxonset,
        beast.evolution.branchratemodel.UCRelaxedClockModel.tree,
        beast.evolution.branchratemodel.UCRelaxedClockModel.rateCategories,
        beast.evolution.branchratemodel.UCRelaxedClockModel.distr,
        beast.evolution.branchratemodel.RandomLocalClockModel.tree,
        beast.evolution.branchratemodel.RandomLocalClockModel.meanRate,
        beast.evolution.branchratemodel.RandomLocalClockModel.indicators,
        beast.evolution.operators.ScaleOperator.indicator,
        beast.core.Operator.weight,
        beast.core.Logger.model,
        beast.evolution.tree.coalescent.BayesianSkyline.treeIntervals,
        beast.evolution.tree.coalescent.BayesianSkyline.groupSizes,
        beast.evolution.tree.coalescent.BayesianSkyline.popSizes,
        beast.evolution.speciation.YuleModel.originHeight,
        beast.mascot.distribution.mascot.tree,
        beast.mascot.distribution.Mascot.structuredTreeIntervals,
        beast.mascot.distribution.Mascot.dynamics,
        beast.mascot.distribution.Mascot.maxStep,
        beast.mascot.distribution.Mascot.stepSize,
        beast.mascot.distribution.Mascot.saveRamInput,
        beast.mascot.distribution.Mascot.epsilon'
        >
        
        <panel spec='BeautiPanelConfig' panelname="Partitions" tiptext="Data Partitions"
        path='distribution/distribution[id="likelihood"]/distribution/data'
        hasPartitions="none" icon='2220.png.x' forceExpansion='FALSE'
        type='beast.evolution.alignment.Alignment'
        />
        
        <panel spec='BeautiPanelConfig' panelname="Tip Dates" tiptext="Specify times at which taxa were sampled"
        path='tree'
        hasPartitions="Tree" icon='2.png.x' forceExpansion='TRUE'
        isVisible='true'
        />
        
        <panel spec='BeautiPanelConfig' panelname="Tip Locations" tiptext="Specify locations from which taxa were sampled"
        path='tree/typeTrait'
        hasPartitions="Tree" icon='2.png.x' forceExpansion='TRUE'
        isVisible='true'
        />
        
        <panel spec='BeautiPanelConfig' panelname="Site Model" tiptext="Site model and substitution model specifications"
        path='siteModel'
        hasPartitions="SiteModel" icon='3.png.x' forceExpansion='TRUE'
        />
        
        <panel spec='BeautiPanelConfig' panelname="Clock Model" tiptext="Clock model"
        path='branchRateModel'
        hasPartitions="ClockModel" icon='4.png.x' forceExpansion='TRUE'
        />
        
        <panel spec='BeautiPanelConfig' panelname="Priors" tiptext="Other priors"
        path='distribution/distribution[id="prior"]/distribution'
        hasPartitions="none" icon='7.png.x' forceExpansion='TRUE_START_COLLAPSED'
        type='beast.core.Distribution'
        />
        
        <panel spec='BeautiPanelConfig' panelname="Operators" tiptext="MCMC Operator details"
        path='operator'
        hasPartitions="none" icon='8.png.x' forceExpansion='TRUE_START_COLLAPSED'
        isVisible='false' buttonStatus='ADD_ONLY'
        />
        
        <panel spec='BeautiPanelConfig' panelname="MCMC" tiptext="MCMC parameters"
        path=''
        hasPartitions="none" icon='9.png.x' forceExpansion='TRUE'
        />
        
        <alignmentProvider id="Add Alignment" spec='BeautiAlignmentProvider' template='@StandardPartitionTemplate'/>
        
        <partitiontemplate id='StandardPartitionTemplate' spec='beast.app.beauti.BeautiSubTemplate' class='beast.evolution.likelihood.TreeLikelihood' mainid='mcmc'>
            <![CDATA[
                
                
                
                <plugin spec='beast.app.mascot.beauti.TreeWithTrait' id='Tree.t:$(n)' estimate='true'>
                    <taxonset spec='beast.evolution.alignment.TaxonSet'>
                        <alignment idref='data'/>
                    </taxonset>
                </plugin>
                
                
                
                <plugin id="structuredCoalescent.t:$(n)" spec="beast.mascot.distribution.Mascot">
                    <structuredTreeIntervals spec="beast.mascot.distribution.StructuredTreeIntervals" id="TreeIntervals.t:$(n)" tree="@Tree.t:$(n)"/>
                    <dynamics spec="beast.mascot.dynamics.Constant" id="constant.t:$(n)">
                        <Ne spec='parameter.RealParameter' id='Ne.t:$(n)' value='1.0' estimate='true'/>
                        <backwardsMigration spec='parameter.RealParameter' id='migration.t:$(n)' value='1.0' estimate='true'/>
                    </dynamics>
                </plugin>
                
                
                
                
                <!-- Tree likelihood -->
                
                <plugin spec='TreeLikelihood' id="treeLikelihood.$(n)">
                <data idref="data"/>
                    <tree idref="Tree.t:$(n)"/>
                    <siteModel spec='SiteModel' id="SiteModel.s:$(n)" gammaCategoryCount='0'>
                        <proportionInvariant spec='parameter.RealParameter' id='proportionInvariant.s:$(n)' value='0.0' lower='0' upper='1' estimate='false'/>
                        <mutationRate spec='parameter.RealParameter' id='mutationRate.s:$(n)' value='1.0' estimate='false'/>
                        <shape spec='parameter.RealParameter' id='gammaShape.s:$(n)' value='1.0' estimate='false'/>
                    </siteModel>
                    <branchRateModel spec='StrictClockModel' id='StrictClock.c:$(n)'>
                        <clock.rate id='clockRate.c:$(n)' spec='parameter.RealParameter' value='1.0' estimate='false'/>
                    </branchRateModel>
                </plugin>
                
                <!-- Initial Tree -->
                <plugin spec='beast.evolution.tree.RandomTree' id='RandomTree.t:$(n)' estimate='false' initial='@Tree.t:$(n)'>
                    <taxa spec='Alignment' idref='data'/>
                    <populationModel id='ConstantPopulation0.t:$(n)' spec='ConstantPopulation'>
                        <popSize id='randomPopSize.t:$(n)' spec='parameter.RealParameter' value='1'/>
                    </populationModel>
                </plugin>
                
                
                <!-- Parameter priors -->
                
                <prior id='ClockPrior.c:$(n)' x='@clockRate.c:$(n)'>
                <distr spec="beast.math.distributions.Uniform" upper='Infinity'/>
                </prior>
                
                <prior id='MutationRatePrior.s:$(n)' x='@mutationRate.s:$(n)'>
                <distr spec="beast.math.distributions.OneOnX"/>
                </prior>
                
                <prior id='GammaShapePrior.s:$(n)' x='@gammaShape.s:$(n)'>
                <distr spec="beast.math.distributions.Exponential" mean='1'/>
                </prior>
                
                <prior id='PropInvariantPrior.s:$(n)' x='@proportionInvariant.s:$(n)'>
                <distr spec="beast.math.distributions.Uniform" lower='0' upper='1'/>
                </prior>
                
                <prior id='NePrior.t:$(n)' x='@Ne.t:$(n)'>
                <distr spec="beast.math.distributions.Exponential" mean='1'/>
                </prior>
                
                <prior id='MigrationPrior.t:$(n)' x='@migration.t:$(n)'>
                <distr spec="beast.math.distributions.Exponential" mean='1'/>
                </prior>
                
                
                
                
                <!-- Parameter operators -->
                
                <operator id='proportionInvariantScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@proportionInvariant.s:$(n)"/>
                <operator id='mutationRateScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@mutationRate.s:$(n)"/>
                <operator id='gammaShapeScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@gammaShape.s:$(n)"/>
                
                <operator id='NeScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8" weight="3" parameter="@Ne.t:$(n)"/>
                <operator id='MigrationScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8" weight="3" parameter="@migration.t:$(n)"/>
                
                <!-- Tree operators -->
                
                <operator spec='ScaleOperator' id='TreeScaler.t:$(n)' weight="3" tree="@Tree.t:$(n)"/>
                <operator spec='ScaleOperator' id='RootScaler.t:$(n)' weight="1" tree="@Tree.t:$(n)"/>
                <operator spec='Uniform' id='Uniform.t:$(n)' weight="30" tree="@Tree.t:$(n)"/>
                <operator spec='SubtreeSlide' id='SubtreeSlide.t:$(n)' weight="15" tree="@Tree.t:$(n)"/>
                <operator spec='Exchange' id='Narrow.t:$(n)' weight="15" tree="@Tree.t:$(n)"/>
                <operator spec='Exchange' id='Wide.t:$(n)' isNarrow="false" weight="3" tree="@Tree.t:$(n)"/>
                <operator spec='WilsonBalding' id='WilsonBalding.t:$(n)' weight="3" tree="@Tree.t:$(n)"/>
                
                
                <operator spec='UpDownOperator' id='NeMigUpDownOperator.t:$(n)' scaleFactor="0.8" weight="1.5" up="@Tree.t:$(n)"/>
                
                
                
                <!-- Trace log elements -->
                <log id="treeHeight.t:$(n)" spec="beast.evolution.tree.TreeHeightLogger" tree="@Tree.t:$(n)"/>
                
                
                
                <logger id="treelog.t:$(n)" fileName="$(n).trees" logEvery="10000" mode="tree">
                <log id="structuredTreelog.t:$(n)" spec="beast.mascot.logger.StructuredTreeLogger" mascot="@structuredCoalescent.t:$(n)"/>
                </logger>
                
                
                
            ]]>
            
            <!--			<connect method="beast.app.beauti.SiteModelInputEditor.customConnector"/>-->
            <!--			<connect method="beast.app.multitypetree.beauti.InitMigrationModelConnector.customConnector"/>-->
            
            <connect srcID='RandomTree.t:$(n)' targetID='mcmc' inputName='init'   if='inposterior(Tree.t:$(n))'/>
            
            
            <connect srcID='typeTraitSet.t:$(n)' targetID='constant.t:$(n)' inputName='typeTrait' if='isInitializing(typeTraitSet.t:$(n))'/>
            <connect srcID='Tree.t:$(n)' targetID='state' inputName='stateNode' if='inposterior(Tree.t:$(n))'/>
            <connect srcID='mutationRate.s:$(n)' targetID='state' inputName='stateNode' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='proportionInvariant.s:$(n)' targetID='state' inputName='stateNode' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='mutationRate.s:$(n)' targetID='state' inputName='stateNode' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='gammaShape.s:$(n)' targetID='state' inputName='stateNode' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
            
            <connect srcID='Ne.t:$(n)' targetID='state' inputName='stateNode' if='inposterior(Ne.t:$(n)) and Ne.t:$(n)/estimate=true'/>
            <connect srcID='migration.t:$(n)' targetID='state' inputName='stateNode' if='inposterior(migration.t:$(n)) and migration.t:$(n)/estimate=true'/>
            
            <connect srcID='treeLikelihood.$(n)' targetID='likelihood' inputName='distribution' if="isInitializing"/>
            <connect srcID='structuredCoalescent.t:$(n)' targetID='prior' inputName='distribution' if="Tree.t:$(n)/estimate=true"/>
            <connect srcID='ClockPrior.c:$(n)'                targetID='prior' inputName='distribution' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>
            <connect srcID='MutationRatePrior.s:$(n)'         targetID='prior' inputName='distribution' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='GammaShapePrior.s:$(n)'           targetID='prior' inputName='distribution' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'>Prior on gamma shape for partition s:$(n)</connect>
            <connect srcID='PropInvariantPrior.s:$(n)'        targetID='prior' inputName='distribution' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'>Prior on proportion invariant for partition s:$(n)</connect>
            <connect srcID='NePrior.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(Ne.t:$(n)) and Ne.t:$(n)/estimate=true'/>
            <connect srcID='MigrationPrior.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(migration.t:$(n)) and migration.t:$(n)/estimate=true'/>
            
            <connect srcID='proportionInvariantScaler.s:$(n)' targetID='mcmc' inputName='operator' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'>Scales proportion of invariant sites parameter of partition $(n)</connect>
            <connect srcID='mutationRateScaler.s:$(n)' targetID='mcmc' inputName='operator' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'>Scales mutation rate of partition s:$(n)</connect>
            <connect srcID='gammaShapeScaler.s:$(n)' targetID='mcmc' inputName='operator' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'>Scales gamma shape parameter of partition s:$(n)</connect>
            
            
            <connect srcID='TreeScaler.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='RootScaler.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='Uniform.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='SubtreeSlide.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='Narrow.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='WilsonBalding.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            
            
            <connect srcID='NeScaler.t:$(n)' targetID='mcmc' inputName='operator' if='Ne.t:$(n)/estimate=true'/>
            <connect srcID='MigrationScaler.t:$(n)' targetID='mcmc' inputName='operator' if='migration.t:$(n)/estimate=true'/>
            
            
            
            <connect srcID='NeMigUpDownOperator.t:$(n)' targetID='mcmc' inputName='operator' if='Tree.t:$(n)/estimate=true'/>
            <connect srcID='Ne.t:$(n)' targetID='NeMigUpDownOperator.t:$(n)' inputName='up' if='Tree.t:$(n)/estimate=true and Ne.t:$(n)/estimate=true'/>
            <connect srcID='migration.t:$(n)' targetID='NeMigUpDownOperator.t:$(n)' inputName='down' if='Tree.t:$(n)/estimate=true and migration.t:$(n)/estimate=true'/>
            <connect srcID='clockRate.c:$(n)' targetID='NeMigUpDownOperator.t:$(n)' inputName='down' if='Tree.t:$(n)/estimate=true and clockRate.c:$(n)/estimate=true'/>

            <connect srcID='treelog.t:$(n)' targetID='mcmc' inputName='logger' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='treeLikelihood.$(n)' targetID='tracelog' inputName='log' if='inlikelihood(treeLikelihood.$(n))'/>
            <connect srcID='structuredCoalescent.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(Tree.t:$(n))'/>
            <connect srcID='TreeHeight.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(Tree.t:$(n))'/>
            <connect srcID='proportionInvariant.s:$(n)' targetID='tracelog' inputName='log' if='inposterior(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='mutationRate.s:$(n)' targetID='tracelog' inputName='log' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='gammaShape.s:$(n)' targetID='tracelog' inputName='log' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
            <connect srcID='clockRate.c:$(n)' targetID='tracelog' inputName='log' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>
            <connect srcID='constant.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(Tree.t:$(n))'/>
            
            
        </partitiontemplate>
        
        <mergepoint id='substModelTemplates'/>
        <mergepoint id='clockModelTemplates'/>
        <mergepoint id='parametricDistributions'/>
    </beauticonfig>
    
    
    <!-- framework for main model -->
    
    <run spec="MCMC" id="mcmc" chainLength="10000000">
        
        <state storeEvery='5000' id='state'></state>
        
        <distribution spec="CompoundDistribution" id="posterior">
            <distribution spec="CompoundDistribution" id="prior"/>
            <distribution spec="CompoundDistribution" id="likelihood"/>
        </distribution>
        
        <logger id='tracelog' logEvery="1000" fileName="$(filebase).log">
            <log idref="posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>
        
        <logger id='screenlog' logEvery="1000">
            <!--model idref='posterior'/-->
            <log idref="posterior"/>
            <ESS spec='ESS' name='log' arg="@posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>
    </run>
    
</beast>
